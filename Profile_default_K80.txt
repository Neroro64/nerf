Tue May  5 14:38:33 2020    [Profile]training

         144017848 function calls (141977822 primitive calls) in 1574.434 seconds

   Ordered by: internal time
   List reduced from 4727 to 47 due to restriction <0.01>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  1423645 1100.053    0.001 1100.171    0.001 {built-in method _pywrap_tensorflow_internal.TFE_Py_FastPathExecute}
    47065  301.572    0.006  301.572    0.006 {built-in method _pywrap_tensorflow_internal.TFE_Py_Execute}
380380/20020   10.334    0.000  176.926    0.009 base_layer.py:710(__call__)
     1001    7.826    0.008   68.660    0.069 {built-in method _pywrap_tensorflow_internal.TFE_Py_TapeGradient}
14295254/14294972    4.955    0.000    9.398    0.000 {built-in method builtins.isinstance}
   160160    4.467    0.000   14.886    0.000 backend.py:4209(relu)
  2841879    3.885    0.000    3.894    0.000 {built-in method _pywrap_tensorflow_internal.Flatten}
    20020    3.787    0.000  164.210    0.008 network.py:769(_run_internal_graph)
   798800    3.567    0.000   15.822    0.000 nest.py:475(map_structure)
5136032/4954073    3.501    0.000    7.835    0.000 {built-in method builtins.hasattr}
   380380    2.863    0.000   10.970    0.000 base_layer.py:1947(_set_mask_metadata)
   900900    2.843    0.000   50.836    0.000 backprop.py:116(_gradient_function)
  1349579    2.697    0.000    4.453    0.000 abc.py:180(__instancecheck__)
   180180    2.655    0.000  100.626    0.001 core.py:1035(call)
   760760    2.629    0.000    4.322    0.000 base_layer.py:2001(_call_arg_was_passed)
  3989920    2.268    0.000    2.372    0.000 {built-in method builtins.getattr}
   778778    2.234    0.000    8.125    0.000 tf_utils.py:322(is_symbolic_tensor)
  2841879    2.003    0.000    7.211    0.000 nest.py:232(flatten)
   290484    1.890    0.000    3.877    0.000 ops.py:6277(__init__)
   879893    1.816    0.000    9.303    0.000 nest.py:417(pack_sequence_as)
   690809    1.801    0.000    2.758    0.000 ops.py:6364(enter_eager_name_scope)
  2500929    1.743    0.000    1.743    0.000 _weakrefset.py:70(__contains__)
   520520    1.680    0.000   39.671    0.000 gen_math_ops.py:6083(mat_mul)
   380380    1.636    0.000   11.936    0.000 base_layer.py:1987(_collect_input_masks)
   180180    1.613    0.000   21.853    0.000 nn_ops.py:2685(bias_add)
   803709    1.515    0.000    1.841    0.000 contextlib.py:59(__init__)
   146224    1.502    0.000    1.719    0.000 constant_op.py:68(convert_to_eager_tensor)
   261279    1.474    0.000    2.223    0.000 nest.py:118(_sequence_like)
   704720    1.395    0.000    3.764    0.000 dtypes.py:144(is_floating)
   557557    1.382    0.000    2.676    0.000 backprop.py:100(get_attr)
803709/783373    1.346    0.000    3.393    0.000 contextlib.py:85(__exit__)
  2841879    1.314    0.000    5.208    0.000 pywrap_tensorflow_internal.py:2619(Flatten)
   900904    1.308    0.000    2.155    0.000 registry.py:82(lookup)
484484/440440    1.301    0.000    5.802    0.000 layer_utils.py:42(filter_empty_layer_containers)
   562006    1.270    0.000    2.002    0.000 ops.py:5452(get_default)
   760760    1.204    0.000   10.392    0.000 tf_utils.py:315(are_all_symbolic_tensors)
  1674412    1.192    0.000    1.678    0.000 dtypes.py:690(as_dtype)
   380380    1.187    0.000    6.915    0.000 base_layer_utils.py:437(autocast_context_manager)
   760760    1.160    0.000    1.308    0.000 base_layer_utils.py:389(enter)
    40040    1.158    0.000   18.827    0.000 function.py:1143(_call_flat)
   180180    1.129    0.000   21.935    0.000 math_grad.py:1566(_MatMulGrad)
  1201200    1.097    0.000    1.388    0.000 base_layer.py:2254(__setattr__)
  1423645    1.062    0.000    1.733    0.000 context.py:1039(post_execution_callbacks)
  1266265    1.049    0.000    1.049    0.000 ops.py:1082(graph)
   729314    1.014    0.000    1.726    0.000 context.py:1591(executing_eagerly)
   400400    1.014    0.000    2.839    0.000 ops.py:6427(__enter__)
1607673/1567001    1.008    0.000    5.314    0.000 {built-in method builtins.next}